import { parse } from "./deps.ts";
import { Fetcher } from "./service/fetcher.ts";
import { OutputHandler } from "./service/output_handler.ts";
const { _, h, help, p, f, a, l, R, F, d, depth } = parse(Deno.args);
export const url = _[0].toString();
if (h || help) {
    const help = await Deno.readTextFile("./help.txt");
    console.log(help);
    Deno.exit();
}
let res;
try {
    res = await fetch(url);
}
finally {
    if (!res || res.status === 404 || res.status === 502) {
        OutputHandler.logError(`Could not connect to ${url}`);
        Deno.exit();
    }
}
const routeFilePath = typeof R === "string" ? "./wordlists/" + R : "./wordlists/common.txt";
console.log(`\nFound ${url}`);
const fetchOptions = {
    wordFilePath: routeFilePath,
    useRouteParam: p,
    depth: d || depth,
    useFileExtensions: f
};
const fetcher = new Fetcher(url, fetchOptions);
const output = new OutputHandler(fetcher.routes, d || depth);
fetcher.onBeforeFetch = output.handleBeforeFetch;
fetcher.onRouteFound = output.handleRouteFound;
fetcher.onProcessFinished = output.handleProcessFinished;
OutputHandler.logWithDate(" Start searching for Routes...");
await fetcher.start();
if (l) {
    Deno.writeTextFile("./log.txt", fetcher.routesFound.reduce((last, current) => last + "\r" + current));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibW9kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxXQUFXLENBQUE7QUFDakMsT0FBTyxFQUFFLE9BQU8sRUFBZ0IsTUFBTSxzQkFBc0IsQ0FBQTtBQUM1RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sNkJBQTZCLENBQUE7QUFHM0QsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO0FBRW5FLE1BQU0sQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUE7QUFFbEMsSUFBSSxDQUFDLElBQUksSUFBSSxFQUFFO0lBQ1gsTUFBTSxJQUFJLEdBQUcsTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxDQUFBO0lBQ2xELE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDakIsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFBO0NBQ2Q7QUFHRCxJQUFJLEdBQXlCLENBQUE7QUFFN0IsSUFBSTtJQUNBLEdBQUcsR0FBRyxNQUFNLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQTtDQUN6QjtRQUNPO0lBQ0osSUFBSSxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLEdBQUcsRUFBRTtRQUNsRCxhQUFhLENBQUMsUUFBUSxDQUFDLHdCQUF3QixHQUFHLEVBQUUsQ0FBQyxDQUFBO1FBQ3JELElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQTtLQUNkO0NBQ0o7QUFFRCxNQUFNLGFBQWEsR0FBRyxPQUFPLENBQUMsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLGNBQWMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLHdCQUF3QixDQUFBO0FBRzNGLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQyxDQUFBO0FBRTdCLE1BQU0sWUFBWSxHQUFpQjtJQUMvQixZQUFZLEVBQUUsYUFBYTtJQUMzQixhQUFhLEVBQUUsQ0FBQztJQUNoQixLQUFLLEVBQUUsQ0FBQyxJQUFJLEtBQUs7SUFDakIsaUJBQWlCLEVBQUUsQ0FBQztDQUN2QixDQUFBO0FBRUQsTUFBTSxPQUFPLEdBQUcsSUFBSSxPQUFPLENBQUMsR0FBRyxFQUFFLFlBQVksQ0FBQyxDQUFBO0FBRTlDLE1BQU0sTUFBTSxHQUFHLElBQUksYUFBYSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFBO0FBRTVELE9BQU8sQ0FBQyxhQUFhLEdBQUcsTUFBTSxDQUFDLGlCQUFpQixDQUFBO0FBQ2hELE9BQU8sQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDLGdCQUFnQixDQUFBO0FBQzlDLE9BQU8sQ0FBQyxpQkFBaUIsR0FBRyxNQUFNLENBQUMscUJBQXFCLENBQUE7QUFFeEQsYUFBYSxDQUFDLFdBQVcsQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFBO0FBRTNELE1BQU0sT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFBO0FBRXJCLElBQUksQ0FBQyxFQUFFO0lBQ0gsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLEVBQUUsQ0FBQyxJQUFJLEdBQUcsSUFBSSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUE7Q0FDeEcifQ==